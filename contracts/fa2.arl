archetype fa2

asset tokens {
    id : nat
}

asset ledger identified by token holder to big_map {
    token  : nat;
    holder : address;
    amount : nat = 0;
}

record transfer_destination {
    %to          : address;
    token_id     : nat;
    token_amount : nat
}

entry add_token (new_token_id : nat, totalsupply : nat) {
    failif {
        f0 : tokens.contains(new_token_id);
    }
    effect {
        ledger.add({ new_token_id; caller; totalsupply });
        tokens.add ({ new_token_id });
    }
}

entry %transfer(%from : address, tds : list<transfer_destination>) {
    for td in tds do
        dorequire(tokens.contains(td.token_id), "FA2_TOKEN_UNDEFINED");
        dorequire(ledger[(td.token_id, %from)].amount >= td.token_amount, "FA2_INSUFFICIENT_BALANCE");
        ledger.update((td.token_id, %from), { amount -= td.token_amount });
        ledger.addupdate((td.token_id, td.%to), { amount += td.token_amount });
    done;
}

record balance_of_request {
    owner : address;
    btoken_id : nat;
}

record balance_of_response {
    request : balance_of_request;
    bor_balance : nat;
}

getter balance_of (brs : list<balance_of_request>) : list<balance_of_response> {
    return map(brs, br -> {
        request = br;
        bor_balance = (if ledger.contains((br.btoken_id,br.owner)) then
                        ledger[(br.btoken_id,br.owner)].amount
                       else 0)
    })
}
